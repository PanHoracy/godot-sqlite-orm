class_name {class_name}ORM extends "{script_path}"

#TODO Add entry value validation. That is, let entry pass value inside of it to
# column class, for it to validate, if it's correct


class {class_name}ORMSelect:
	extends ORMSelect
	
	
	func _init(table: ORMTable) -> void:
		super._init(table)
	
	
	func get_entries() -> Array[{class_name}ORMEntry]:
		var raw_results := get_as_raw_result()
		var entries: Array[{class_name}ORMEntry] = []
		for result in raw_results:
			entries.push_back({class_name}ORMEntry.wrap_query_result(result))
		return entries
	
	
	func get_first_entry() -> {class_name}ORMEntry:
		_limit = 1
		var entries := get_entries()
		
		return entries[0] if not entries.is_empty() else null
	
	
	#region Recasting base methods
	
	func where(condition: ORMCondition) -> {class_name}ORMSelect:
		return super.where(condition) as {class_name}ORMSelect
	
	
	func order_by_asc(column: ORMColumn) -> {class_name}ORMSelect:
		return super.order_by_asc(column) as {class_name}ORMSelect
	
	
	func order_by_desc(column: ORMColumn) -> {class_name}ORMSelect:
		return super.order_by_desc(column) as {class_name}ORMSelect
	
	
	func limit(amount: int, offset: int = 0) -> {class_name}ORMSelect:
		return super.limit(amount, offset) as {class_name}ORMSelect
	
	
	func select_columns(columns: Array[ORMColumn]) -> {class_name}ORMSelect:
		return super.select_columns(columns) as {class_name}ORMSelect
	
	
	func distinct(value: bool = true) -> {class_name}ORMSelect:
		return super.distinct(value) as {class_name}ORMSelect
	
	#endregion


class {class_name}ORMUpdate:
	extends ORMQuery
	
	var _updated_row: {class_name}ORMEntry = null
	
	
	func _init(table: ORMTable) -> void:
		super._init(table)
	
	
	func set_row(updated_row: {class_name}ORMEntry) -> {class_name}ORMUpdate:
		_updated_row = updated_row
		return self
	
	
	func update() -> bool:
		if _updated_row == null:
			push_error("Cannot run update query without updated row")
			return false
		
		return DB._get_db().update_rows(
			_table.get_name(),
			_condition.get_condition(),
			_updated_row.get_entry_dict()
		)
	
	
	#region Recasting base methods
	
	func where(condition: ORMCondition) -> {class_name}ORMUpdate:
		return super.where(condition) as {class_name}ORMUpdate
	
	
	func order_by_asc(column: ORMColumn) -> {class_name}ORMUpdate:
		return super.order_by_asc(column) as {class_name}ORMUpdate
	
	
	func order_by_desc(column: ORMColumn) -> {class_name}ORMUpdate:
		return super.order_by_desc(column) as {class_name}ORMUpdate
	
	
	func limit(amount: int, offset: int = 0) -> {class_name}ORMUpdate:
		return super.limit(amount, offset) as {class_name}ORMUpdate
	
	#endregion


func _init() -> void:
	_name = "{table_name}"
	
	{setting_column_names}
	
	super._init()


func create_select_query() -> {class_name}ORMSelect:
	return {class_name}ORMSelect.new(self)


func create_update_query() -> {class_name}ORMUpdate:
	return {class_name}ORMUpdate.new(self)


func put_entries_array_into_table(entries: Array[{class_name}ORMEntry]) -> void:
	DB._get_db().insert_rows(get_name(), entries.map(func(e: {class_name}ORMEntry): return e.get_entry_dict()) as Array[Dictionary])


func put_entry_into_table(entry: {class_name}ORMEntry) -> void:
	DB._get_db().insert_row(get_name(), entry.get_entry_dict())


func get_all() -> Array[{class_name}ORMEntry]:
	var result: Array[{class_name}ORMEntry] = []
	
	var query := "SELECT * FROM %s" % get_name()
	var query_result: Array[Dictionary] = DB._run_query_and_get_result_array(query)
	
	if query_result.is_empty():
		return []
	
	if query_result[0].has("error"):
		push_error("Error while getting all entries. Returning empty array. Error message: %s" % query_result[0]["error"])
		return []
	
	for result_dict in query_result:
		result.push_back({class_name}ORMEntry.wrap_query_result(result_dict))
	
	return result


{function_extensions}


func _get_all_columns() -> Array[ORMColumn]:
	return [{columns}]
