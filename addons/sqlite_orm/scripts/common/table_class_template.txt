class_name {class_name}ORM extends "{script_path}"

#TODO Add entry value validation. That is, let entry pass value inside of it to
# column class, for it to validate, if it's correct

#TODO Add descriptions to exposed table methods

func _init() -> void:
	_name = "{table_name}"
	
	{setting_column_names}
	
	super._init()

#HACK Should have type specification. Currenty removed becasue getting class of
# a class nested in other class in autoload is not possible. 
func put_entries_array_into_table(entries: Array) -> void:
	DB._get_db().insert_rows(get_name(), entries.map(func(e: {class_name}ORMEntry): return e.get_entry_dict()) as Array[Dictionary])


func put_entry_into_table(entry: {class_name}ORMEntry) -> void:
	DB._get_db().insert_row(get_name(), entry.get_entry_dict())


func get_all() -> Array[{class_name}ORMEntry]:
	var result: Array[{class_name}ORMEntry] = []
	
	var query := "SELECT * FROM %s" % get_name()
	var query_result: Array[Dictionary] = DB._run_query_and_get_result_array(query)
	
	if query_result.is_empty():
		return []
	
	if query_result[0].has("error"):
		push_error("Error while getting all entries. Returning empty array. Error message: %s" % query_result[0]["error"])
		return []
	
	for result_dict in query_result:
		result.push_back({class_name}ORMEntry.wrap_query_result(result_dict))
	
	return result


{function_extensions}


func _get_all_columns() -> Array[Column]:
	var result: Array[Column] = [{columns}]
	
	result.append_array(super._get_all_columns())
	
	return result
